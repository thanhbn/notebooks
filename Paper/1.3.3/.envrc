# COTTON Implementation Environment
# Specialized ML environment for Chain-of-Thought in Neural Code Generation
# Based on "Chain-of-Thought in Neural Code Generation: From and For Lightweight Language Models"

# Check if virtual environment exists, if not create it
if [[ ! -d "venv_cotton" ]]; then
    echo "Creating COTTON ML virtual environment..."
    python3 -m venv venv_cotton
fi

# Activate the virtual environment
source venv_cotton/bin/activate

# Export environment variables for ML/PyTorch development
export PYTHONPATH="${PWD}:${PWD}/../..:${PYTHONPATH}"
export PROJECT_ROOT="${PWD}/../.."
export ENV_NAME="cotton"

# PyTorch and ML configurations
export CUDA_VISIBLE_DEVICES=0
export TORCH_HOME="${PWD}/../../.cache/torch"
export TRANSFORMERS_CACHE="${PWD}/../../.cache/transformers"
export HF_HOME="${PWD}/../../.cache/huggingface"

# COTTON specific configurations
export COTTON_MODEL_PATH="${PWD}/models"
export COTTON_DATA_PATH="${PWD}/data"
export COTTON_OUTPUT_PATH="${PWD}/output"

# Training configurations
export TOKENIZERS_PARALLELISM=false
export WANDB_PROJECT="cotton-implementation"
export CUDA_LAUNCH_BLOCKING=1

# Set Jupyter kernel preference for this directory
export JUPYTER_DEFAULT_KERNEL="cotton-env"

echo "üß† Activated COTTON ML environment (venv_cotton)"
echo "üìÅ Current directory: ${PWD}"
echo "üêç Python: $(python --version)"
echo "üì¶ Environment: ${ENV_NAME}"
echo "üß† Jupyter kernel: ${JUPYTER_DEFAULT_KERNEL}"
echo "üî• PyTorch cache: ${TORCH_HOME}"
echo "ü§ó Transformers cache: ${TRANSFORMERS_CACHE}"